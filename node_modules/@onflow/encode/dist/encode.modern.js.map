{"version":3,"file":"encode.modern.js","sources":["../src/encode.js"],"sourcesContent":["const rlp = require(\"rlp\")\n\nexport const encodeTransactionPayload = tx => rlpEncode(preparePayload(tx))\nexport const encodeTransactionEnvelope = tx => rlpEncode(prepareEnvelope(tx))\n\nconst paddedHexBuffer = (value, pad) =>\n  Buffer.from(value.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = addr => paddedHexBuffer(addr, 20)\n\nconst blockBuffer = block => paddedHexBuffer(block, 32)\n\nconst scriptBuffer = script => Buffer.from(script, \"utf8\")\nconst signatureBuffer = signature => Buffer.from(signature, \"hex\")\n\nconst rlpEncode = v => {\n  return rlp.encode(v).toString(\"hex\")\n}\n\nconst preparePayload = tx => {\n  validatePayload(tx)\n\n  return [\n    scriptBuffer(tx.script),\n    blockBuffer(tx.refBlock),\n    tx.gasLimit,\n    addressBuffer(tx.proposalKey.address),\n    tx.proposalKey.keyId,\n    tx.proposalKey.sequenceNum,\n    addressBuffer(tx.payer),\n    tx.authorizers.map(addressBuffer),\n  ]\n}\n\nconst prepareEnvelope = tx => {\n  validateEnvelope(tx)\n\n  return [preparePayload(tx), preparePayloadSignatures(tx)]\n}\n\nconst preparePayloadSignatures = tx => {\n  const signers = collectSigners(tx)\n\n  return tx.payloadSigs\n    .map(sig => {\n      return {\n        signerIndex: signers.get(sig.address),\n        keyId: sig.keyId,\n        sig: sig.sig,\n      }\n    })\n    .sort((a, b) => {\n      if (a.signerIndex > b.signerIndex) return 1\n      if (a.signerIndex < b.signerIndex) return -1\n\n      if (a.keyId > b.keyId) return 1\n      if (a.keyId < b.keyId) return -1\n    })\n    .map(sig => {\n      return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)]\n    })\n}\n\nconst collectSigners = tx => {\n  const signers = new Map()\n  let i = 0\n\n  const addSigner = addr => {\n    if (!signers.has(addr)) {\n      signers.set(addr, i)\n      i++\n    }\n  }\n\n  addSigner(tx.proposalKey.address)\n  addSigner(tx.payer)\n  tx.authorizers.forEach(addSigner)\n\n  return signers\n}\n\nconst validatePayload = tx => {\n  payloadFields.forEach(field => checkField(tx, field))\n  proposalKeyFields.forEach(field =>\n    checkField(tx.proposalKey, field, \"proposalKey\")\n  )\n}\n\nconst validateEnvelope = tx => {\n  envelopeFields.forEach(field => checkField(tx, field))\n  tx.payloadSigs.forEach((sig, index) => {\n    payloadSigFields.forEach(field =>\n      checkField(sig, field, \"payloadSigs\", index)\n    )\n  })\n}\n\nconst isNumber = v => typeof v === \"number\"\nconst isString = v => typeof v === \"string\"\nconst isObject = v => v !== null && typeof v === \"object\"\nconst isArray = v => isObject(v) && v instanceof Array\n\nconst payloadFields = [\n  {name: \"script\", check: isString},\n  {name: \"refBlock\", check: isString, defaultVal: \"0\"},\n  {name: \"gasLimit\", check: isNumber},\n  {name: \"proposalKey\", check: isObject},\n  {name: \"payer\", check: isString},\n  {name: \"authorizers\", check: isArray},\n]\n\nconst proposalKeyFields = [\n  {name: \"address\", check: isString},\n  {name: \"keyId\", check: isNumber},\n  {name: \"sequenceNum\", check: isNumber},\n]\n\nconst envelopeFields = [{name: \"payloadSigs\", check: isArray}]\n\nconst payloadSigFields = [\n  {name: \"address\", check: isString},\n  {name: \"keyId\", check: isNumber},\n  {name: \"sig\", check: isString},\n]\n\nconst checkField = (obj, field, base, index) => {\n  const {name, check, defaultVal} = field\n  if (obj[name] == null && defaultVal != null) obj[name] = defaultVal\n  if (obj[name] == null) throw missingFieldError(name, base, index)\n  if (!check(obj[name])) throw invalidFieldError(name, base, index)\n}\n\nconst printFieldName = (field, base, index) => {\n  if (!!base)\n    return index == null ? `${base}.${field}` : `${base}.${index}.${field}`\n  return field\n}\n\nconst missingFieldError = (field, base, index) =>\n  new Error(`Missing field ${printFieldName(field, base, index)}`)\nconst invalidFieldError = (field, base, index) =>\n  new Error(`Invalid field ${printFieldName(field, base, index)}`)\n"],"names":["rlp","require","encodeTransactionPayload","tx","rlpEncode","preparePayload","encodeTransactionEnvelope","prepareEnvelope","paddedHexBuffer","value","pad","Buffer","from","padStart","addressBuffer","addr","v","encode","toString","validatePayload","script","block","refBlock","gasLimit","proposalKey","address","keyId","sequenceNum","payer","authorizers","map","validateEnvelope","preparePayloadSignatures","signers","collectSigners","payloadSigs","sig","signerIndex","get","sort","a","b","signature","Map","i","addSigner","has","set","forEach","payloadFields","field","checkField","proposalKeyFields","envelopeFields","index","payloadSigFields","isNumber","isString","isObject","isArray","Array","name","check","defaultVal","obj","base","missingFieldError","invalidFieldError","printFieldName","Error"],"mappings":"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"}