{"version":3,"file":"send.js","sources":["../src/unary.js","../src/send-transaction.js","../src/send-get-account.js","../src/send-get-latest-block.js","../src/send.js","../src/send-get-transaction-status.js","../src/send-execute-script.js","../src/send-get-events.js","../src/send-ping.js"],"sourcesContent":["import {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request) {\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = script => Buffer.from(script, \"utf8\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\nconst addressBuffer = addr => paddedHexBuffer(addr, 20)\n\nexport async function sendTransaction(ix, opts = {}) {\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.payload.code))\n  tx.setGasLimit(ix.payload.limit)\n  tx.setReferenceBlockId(ix.payload.ref ? hexBuffer(ix.payload.ref) : null)\n  tx.setPayer(addressBuffer(ix.payer.acct))\n  ix.authz.forEach(a => tx.addAuthorizers(addressBuffer(a.acct)))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(addressBuffer(ix.proposer.addr))\n  proposalKey.setKeyId(ix.proposer.keyId)\n  proposalKey.setSequenceNumber(ix.proposer.sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  ix.authz.forEach(auth => {\n    if (auth.signature === null) return\n    const authzSig = new Transaction.Signature()\n    authzSig.setAddress(addressBuffer(auth.acct))\n    authzSig.setKeyId(auth.keyId)\n    authzSig.setSignature(hexBuffer(auth.signature))\n\n    tx.addPayloadSignatures(authzSig)\n  })\n\n  const payerSig = new Transaction.Signature()\n  payerSig.setAddress(addressBuffer(ix.payer.acct))\n  payerSig.setKeyId(ix.payer.keyId)\n  payerSig.setSignature(hexBuffer(ix.payer.signature))\n\n  tx.addEnvelopeSignatures(payerSig)\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8())\n\n  return ret\n}\n","import {GetAccountRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = addr => paddedHexBuffer(addr, 20)\n\nexport async function sendGetAccount(ix, opts = {}) {\n  const req = new GetAccountRequest()\n  req.setAddress(addressBuffer(ix.acct))\n\n  const res = await unary(opts.node, AccessAPI.GetAccount, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n  ret.account = {\n    address: u8ToHex(account.getAddress_asU8()),\n    balance: account.getBalance(),\n    code: account.getCode_asU8(),\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8()),\n      signAlgo: publicKey.getSignAlgo(),\n      hashAlgo: publicKey.getHashAlgo(),\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n    })),\n  }\n\n  return ret\n}\n","import {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetLatestBlock(ix, opts = {}) {\n  const req = new GetLatestBlockRequest()\n  req.setIsSealed(ix.isSealed)\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req)\n\n  const latestBlock = res.getBlock()\n\n  const collectionGuarantees = latestBlock.getCollectionGuaranteesList()\n  const blockSeals = latestBlock.getBlockSealsList()\n  const signatures = latestBlock.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.latestBlock = {\n    id: u8ToHex(latestBlock.getId_asU8()),\n    parentId: u8ToHex(latestBlock.getParentId_asU8()),\n    height: latestBlock.getHeight(),\n    timestamp: latestBlock.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {\n  isTransaction,\n  isGetTransactionStatus,\n  isScript,\n  isGetAccount,\n  isGetEvents,\n  isGetLatestBlock,\n  isPing\n} from \"@onflow/interaction\"\nimport {sendTransaction} from \"./send-transaction\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status\"\nimport {sendExecuteScript} from \"./send-execute-script\"\nimport {sendGetAccount} from \"./send-get-account\"\nimport {sendGetEvents} from \"./send-get-events\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block\"\nimport {sendPing} from \"./send-ping\"\n\nexport const send = async (ix, opts = {}) => {\n  switch (true) {\n    case isTransaction(ix):\n      return sendTransaction(ix, opts)\n    case isGetTransactionStatus(ix):\n      return sendGetTransactionStatus(ix, opts)\n    case isScript(ix):\n      return sendExecuteScript(ix, opts)\n    case isGetAccount(ix):\n      return sendGetAccount(ix, opts)\n    case isGetEvents(ix):\n      return sendGetEvents(ix, opts)\n    case isGetLatestBlock(ix):\n      return sendGetLatestBlock(ix, opts)\n    case isPing(ix):\n      return sendPing(ix, opts)\n    default:\n      return ix\n  }\n}\n","import {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, opts = {}) {\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.txId))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req)\n\n  let events = res.getEventsList()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    status: res.getStatus(),\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8()),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: event.getPayload_asU8(),\n    })),\n  }\n\n  return ret\n}\n","import {ExecuteScriptAtLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nexport async function sendExecuteScript(ix, opts = {}) {\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  const code = Buffer.from(ix.payload.code, \"utf8\")\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.encodedData = res.getValue_asU8()\n\n  return ret\n}\n","import {GetEventsForHeightRangeRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetEvents(ix, opts = {}) {\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.eventType)\n  req.setStartHeight(Number(ix.bounds.start))\n  req.setEndHeight(Number(ix.bounds.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.map(result => {\n    const events = result.getEventsList()\n    return {\n      blockId: result.getBlockId(),\n      blockHeight: result.getBlockHeight(),\n      events: events.map(event => ({\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8()),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: event.getPayload_asU8(),\n      })),\n    }\n  })\n\n  return ret\n}\n","import {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nexport async function sendPing(ix, opts = {}) {\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  return ret\n}\n"],"names":["unary","host","method","request","Promise","resolve","reject","grpc","onEnd","statusMessage","status","Code","OK","message","Error","setDefaultTransport","NodeHttpTransport","hexBuffer","hex","Buffer","from","addressBuffer","addr","padStart","pad","u8ToHex","u8","toString","ix","opts","isTransaction","tx","Transaction","setScript","payload","code","setGasLimit","limit","setReferenceBlockId","ref","setPayer","payer","acct","authz","forEach","a","addAuthorizers","proposalKey","ProposalKey","setAddress","proposer","setKeyId","keyId","setSequenceNumber","sequenceNum","setProposalKey","auth","signature","authzSig","Signature","setSignature","addPayloadSignatures","payerSig","addEnvelopeSignatures","req","SendTransactionRequest","setTransaction","node","AccessAPI","SendTransaction","res","ret","response","tag","transactionId","getId_asU8","sendTransaction","isGetTransactionStatus","GetTransactionRequest","setId","txId","GetTransactionResult","events","getEventsList","transaction","getStatus","statusCode","getStatusCode","errorMessage","getErrorMessage","map","event","type","getType","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","getPayload_asU8","sendGetTransactionStatus","isScript","ExecuteScriptAtLatestBlockRequest","ExecuteScriptAtLatestBlock","encodedData","getValue_asU8","sendExecuteScript","isGetAccount","GetAccountRequest","GetAccount","account","getAccount","address","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","hashAlgo","getHashAlgo","weight","getWeight","sequenceNumber","getSequenceNumber","sendGetAccount","isGetEvents","GetEventsForHeightRangeRequest","setType","eventType","setStartHeight","Number","bounds","start","setEndHeight","end","GetEventsForHeightRange","results","getResultsList","result","blockId","getBlockId","blockHeight","getBlockHeight","sendGetEvents","isGetLatestBlock","GetLatestBlockRequest","setIsSealed","isSealed","GetLatestBlock","latestBlock","getBlock","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","id","parentId","getParentId_asU8","height","getHeight","timestamp","getTimestamp","collectionGuarantee","collectionId","getCollectionId_asU8","blockSeal","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetLatestBlock","isPing","PingRequest","Ping","sendPing"],"mappings":"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"}