{"version":3,"file":"fcl.module.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/actor/index.js","../src/actor/mailbox/index.js","../src/config/index.js","../src/default-config.js","../src/send/index.js","../src/user/__factories__/gen-user.js","../src/user/index.js","../src/fcl.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import {mailbox as createMailbox} from \"./mailbox\"\nimport queueMicrotask from \"queue-microtask\"\n\nconst REGISTRY = {}\nvar pid = 0b0\n\nconst DEFAULT_TIMEOUT = 5000\nconst DEFAULT_TAG = \"---\"\nexport const send = (addr, tag, data, opts = {}) =>\n  new Promise((reply, reject) => {\n    const expectReply = opts.expectReply || false\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT\n\n    if (expectReply && timeout) {\n      setTimeout(\n        () =>\n          reject(new Error(`Timeout: ${timeout}ms passed without a response.`)),\n        timeout\n      )\n    }\n\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply,\n      reject,\n    }\n\n    try {\n      REGISTRY[addr].mailbox.deliver(payload)\n      if (!expectReply) reply(true)\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, error)\n    }\n  })\n\nexport const kill = addr => {\n  delete REGISTRY[addr]\n}\n\nexport const spawn = (fn, addr = null) => {\n  if (addr == null) addr = ++pid\n  if (REGISTRY[addr] != null) return addr\n\n  REGISTRY[addr] = {\n    addr,\n    mailbox: createMailbox(),\n    subs: new Set(),\n    kvs: {},\n  }\n\n  const ctx = {\n    self: () => addr,\n    receive: () => REGISTRY[addr].mailbox.receive(),\n    send: (to, tag, data, opts = {}) => {\n      opts.from = addr\n      return send(to, tag, data, opts)\n    },\n    broadcast: (tag, data, opts = {}) => {\n      opts.from = addr\n      for (let to of REGISTRY[addr].subs) send(to, tag, data, opts)\n    },\n    subscribe: sub => sub != null && REGISTRY[addr].subs.add(sub),\n    unsubscribe: sub => sub != null && REGISTRY[addr].subs.delete(sub),\n    put: (key, value) => {\n      if (key != null) REGISTRY[addr].kvs[key] = value\n    },\n    get: (key, fallback) => {\n      const value = REGISTRY[addr].kvs[key]\n      return value == null ? fallback : value\n    },\n    delete: key => {\n      delete REGISTRY[addr].kvs[key]\n    },\n    update: (key, fn) => {\n      if (key != null) REGISTRY[addr].kvs[key] = fn(REGISTRY[addr].kvs[key])\n    },\n    keys: () => {\n      return Object.keys(REGISTRY[addr].kvs)\n    },\n  }\n\n  queueMicrotask(async () => {\n    await fn(ctx)\n    kill(addr)\n  })\n\n  return addr\n}\n","export const mailbox = () => {\n  const queue = []\n  var next\n\n  return {\n    async deliver(msg) {\n      queue.push(msg)\n      if (next) {\n        next(queue.shift())\n        next = undefined\n      }\n    },\n\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift()\n        if (msg) return resolve(msg)\n        next = resolve\n      })\n    },\n  }\n}\n","import {spawn, send} from \"../actor\"\n\nconst NAME = \"config\"\nconst PUT = \"PUT_CONFIG\"\nconst GET = \"GET_CONFIG\"\nconst UPDATE = \"UPDATE_CONFIG\"\nconst DELETE = \"DELETE_CONFIG\"\nconst WHERE = \"WHERE_CONFIG\"\nconst SUBSCRIBE = \"SUBSCRIBE\"\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\"\nconst UPDATED = \"CONFIG/UPDATED\"\n\nspawn(async ctx => {\n  const snapshot = keys =>\n    keys.reduce((acc, key) => ({...acc, [key]: ctx.get(key)}), {})\n\n  __loop: while (1) {\n    const letter = await ctx.receive()\n    const data = letter.data\n\n    try {\n      switch (letter.tag) {\n        case PUT:\n          if (data.key != null) {\n            ctx.put(data.key, data.value)\n            ctx.broadcast(UPDATED, snapshot(ctx.keys()))\n          }\n          continue __loop\n\n        case GET:\n          if (data.key != null) {\n            letter.reply(ctx.get(data.key, data.fallback))\n          }\n          continue __loop\n\n        case UPDATE:\n          if (data.key != null) {\n            ctx.update(data.key, data.fn)\n            ctx.broadcast(UPDATED, snapshot(ctx.keys()))\n          }\n          continue __loop\n\n        case DELETE:\n          if (data.key != null) {\n            ctx.delete(data.key)\n            ctx.broadcast(UPDATED, snapshot(ctx.keys()))\n          }\n          continue __loop\n\n        case WHERE:\n          if (data.pattern != null) {\n            letter.reply(snapshot(ctx.keys().filter(d => data.pattern.test(d))))\n          }\n          continue __loop\n\n        case SUBSCRIBE:\n          ctx.subscribe(letter.from)\n          ctx.send(letter.from, UPDATED, snapshot(ctx.keys()))\n          continue __loop\n\n        case UNSUBSCRIBE:\n          ctx.unsubscribe(letter.from)\n          continue __loop\n\n        default:\n          continue __loop\n      }\n    } catch (error) {\n      console.error(\"Config Error\", letter, error)\n      continue __loop\n    }\n  }\n}, NAME)\n\nconst identity = v => v\n\nexport const config = () => ({\n  put(key, value) {\n    send(NAME, PUT, {key, value})\n  },\n  get(key, fallback) {\n    return send(NAME, GET, {key, fallback}, {expectReply: true, timeout: 10})\n  },\n  update(key, fn = identity) {\n    send(NAME, UPDATE, {key, fn})\n  },\n  delete(key) {\n    send(NAME, DELETE, {key})\n  },\n  where(pattern) {\n    return send(NAME, WHERE, {pattern}, {expectReply: true, timeout: 10})\n  },\n  subscribe(callback) {\n    const EXIT = \"@EXIT\"\n    const self = spawn(async ctx => {\n      ctx.send(NAME, SUBSCRIBE)\n      while (1) {\n        const letter = await ctx.receive()\n        if (letter.tag === EXIT) {\n          ctx.send(NAME, UNSUBSCRIBE)\n          return\n        }\n        callback(letter.data)\n      }\n    })\n    return () => send(self, EXIT)\n  },\n})\n","import {config} from \"./config\"\nconst $ = config()\n$.put(\"accessNode.api\", \"http://localhost:8080\")\n","import * as sdk from \"@onflow/sdk\"\nimport {config} from \"../config\"\n\nexport const send = async (args = [], opts = {}) => {\n  opts.node = opts.node || await config().get(\"accessNode.api\")\n\n  if (Array.isArray(args)) args = sdk.build(args)\n\n  const ix = await sdk.pipe(args, [\n    sdk.resolve([\n      sdk.resolveParams,\n      sdk.resolveAuthorizations,\n    ]),\n  ])\n\n  return sdk.send(ix, opts)\n}\n","const pretendLatency = (ms = 10) =>\n  new Promise(resolve => setTimeout(resolve, ms))\n\nconst genName = () => {\n  return \"bob the builder\"\n}\n\nconst genAvatar = acct => {\n  return `https://avatars.onflow.org/avatar/${acct}.svg`\n}\n\nconst genBio = () => {\n  return \"Can he fix it, yes he can.\"\n}\n\nconst genHooks = () => {\n  return {}\n}\n\nexport const genUser = async acct => {\n  await pretendLatency()\n  return {\n    acct,\n    name: genName(),\n    avatar: genAvatar(),\n    bio: genBio(),\n    hooks: genHooks(acct),\n  }\n}\n","import {spawn, send} from \"../actor\"\nimport {genUser} from \"./__factories__/gen-user\"\n\nconst SUBSCRIBE = \"SUBSCRIBE\"\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\"\nconst UPDATED = \"USER/UPDATED\"\nconst SNAPSHOT = \"SNAPSHOT\"\nconst FETCH_USER = \"FETCH_USER\"\n\nconst snapshot = (ctx, keys) => {\n  return keys.reduce((acc, key) => ({...acc, [key]: ctx.get(key)}), {})\n}\n\nconst HANDLERS = {\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, snapshot(ctx, ctx.keys()))\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(snapshot(ctx, ctx.keys()))\n  },\n}\n\nconst saveUser = (ctx, user) => {\n  for (let key of Object.keys(user)) ctx.put(key, user[key])\n}\n\nconst userLogic = async ctx => {\n  saveUser(ctx, await genUser(ctx.self()))\n\n  __loop: while (1) {\n    const letter = await ctx.receive()\n\n    try {\n      await HANDLERS[letter.tag](ctx, letter)\n    } catch (error) {\n      console.error(\"User Error\", letter, error)\n    } finally {\n      continue __loop\n    }\n  }\n}\n\nconst identity = v => v\n\nconst spawnUser = acct => spawn(userLogic, acct)\n\nexport const user = acct => ({\n  async authorization() {\n    spawnUser(acct)\n\n    const signFn = async () => {\n      // TODO: async decomp via hooks\n      // TODO: async remote signing\n      throw new Error(\n        `fcl.user(${acct}).payerAuthorization WIP error -- known missing functionality`\n      )\n    }\n    return {acct, signFn}\n  },\n\n  async payerAuthorization() {\n    spawnUser(acct)\n\n    const signFn = async () => {\n      // TODO: async decomp via hooks\n      // TODO: async remote signing\n      throw new Error(\n        `fcl.user(${acct}).payerAuthorization WIP error -- known missing functionality`\n      )\n    }\n    return {acct, signFn}\n  },\n\n  async snapshot() {\n    spawnUser(acct)\n    return send(acct, SNAPSHOT, null, {expectReply: true, timeout: 0})\n  },\n\n  param(key) {\n    return {\n      value: acct,\n      xform: {\n        asParam: v => v,\n        asInjection: v => v,\n      },\n    }\n  },\n\n  subscribe(callback) {\n    spawnUser(acct)\n    const EXIT = \"@EXIT\"\n    const self = spawn(async ctx => {\n      ctx.send(acct, SUBSCRIBE)\n      while (1) {\n        const letter = await ctx.receive()\n        if (letter.tag === EXIT) {\n          ctx.send(acct, UNSUBSCRIBE)\n          return\n        }\n        callback(letter.data)\n      }\n    })\n    return () => send(self, EXIT)\n  },\n})\n","import \"./default-config\"\nexport {config} from \"./config\"\nexport {send} from \"./send\"\nexport {user} from \"./user\"\n\nexport const authenticate = async () => {}\nexport const unauthenticate = async () => {}\n\nexport const currentUser = () => {\n  return {\n    subscribe: callback => {\n      return function unsubscribe() {}\n    },\n\n    authorization: async () => {},\n    payerAuthorization: async () => {},\n    param: async () => {},\n  }\n}\n\nexport const transaction = txId => {\n  return {\n    subscribe: callback => {\n      return function unsubscribe() {}\n    },\n  }\n}\n\nexport const event = (eventType, start) => {\n  return {\n    subscribe: callback => {\n      return function unsubscribe() {}\n    },\n  }\n}\n\nexport const decode = async _respones => {}\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","Symbol","iterator","asyncIterator","REGISTRY","pid","send","addr","tag","data","opts","Promise","reply","expectReply","timeout","setTimeout","Error","payload","to","from","mailbox","deliver","error","console","spawn","fn","next","queue","msg","push","shift","undefined","receive","resolve","subs","Set","kvs","ctx","self","broadcast","subscribe","sub","add","unsubscribe","put","key","get","fallback","delete","keys","Object","queueMicrotask","kill","NAME","PUT","GET","UPDATED","snapshot","reduce","acc","letter","pattern","filter","d","identity","config","where","_exit2","args","node","Array","isArray","sdk","ix","genAvatar","acct","HANDLERS","userLogic","ms","name","avatar","bio","hooks","genUser","user","saveUser","finalizer","recover","__loop","spawnUser","authorization","signFn","payerAuthorization","param","xform","asParam","asInjection","authenticate","unauthenticate","currentUser","transaction","txId","event","eventType","start","decode","_respones"],"mappings":"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"}